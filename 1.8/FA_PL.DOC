
Fast Asembler v.1.5 by MMMG Soft '95
------------------------------------

Uwaga:

 Jest to wersja DEMO shareware'owego
 programu. Jesli chcesz otrzymac
 pelna wersje pakietu przeslij
 7 zl (nowych).

 W celu uzyskania pelnej dokumentacji
 SDX (130 stron) na dysku przeslij
 dodatkowe 3 zl (nowe), lub 5 zl
 gdy interesuje Cie tylko dokumenta-
 cja.

 Gdy chcesz aby nowa wersja FA 2.0
 zostala Ci przyslana do domu gdy
 tylko zostanie napisana przeslij
 dodatkowe 5 zl (wersja FA 2.0 bedzie
 miala wbudowana obsluge makrodefi-
 nicji).

 Wszystkie uwagi i pieniadze prosze
 przesylac na adres:

 Marek M.M. Goderski
 os. Armii Krajowej 51/7
 61-377 Poznan.

 Uwaga: Po przeslaniu pieniedzy
 reklamacji nie uwzglednia sie, autor
 programu zapewnia ze pelna wersja FA
 calkowicie przejmuje cechy wersji
 DEMO i jest pozbawiona jej ograni-
 czen takich jak dozwolona liczba
 wierszy kodu, itp. Przyjmowane beda
 jednak reklamacje wynikajace z
 przyczyn niezaleznych jak np:
 dzialalnosc poczty Polskiej, uszko-
 dzenia nosnika itp.

 Uwaga: Na przekazach pocztowych w
 miejscu na korespondencje prosze
 czytelnie wypelniac dane osobiste,
 ADRES i zamowienie.

 Autor prowadzi takze wymiane progra-
 mow public domain jak male uzytkowe
 programy pod SDX oraz wszelkie DEMA
 itp. Informacje o po przyslaniu
 dysku i (lub) koperty zwrotnej.

 Juz niebawem :

        FD : fast disassembler,
        FE : fast edytor,
 SDX TOMS  : nowy sterownik TOMS,
 SDX CACHE : cache dyskowy dla SDX,
    IBMDOS : program umozliwiajacy
             bezposredni odczyt
             dyskow IBM z poziomu SDX,

 a takze MMMG Soft DEMO, calo dyskowe
 demo !

Fast Asembler jak sama nazwa wskazuje
jest asemblerem, choc nie tak szybkim
jakby to z niej wynikalo (Hmm).

Jest to asembler szerokiego zastoso-
wania, ale dedykowany jest systemowi
SDX i tylko z nim pracuje.

Jest on calkowicie zgodny z Quick
Asemblerem v.1.0, a w stosunku do
niego posiada wiele udogonien, co za
tym idzie jest on niezgodny z MAC 65.

Skladnia wywolania programu :

Uwaga:

 [opc]   - opcja ktora mozna pominac,
 op1|op2 - nalezy wybrac jedna opcje.

FA zrodlo[.roz] cel[.roz] [/a] [/b]

 zrodlo - plik zrodlowy w ATASCII,
 cel    - plik docelowy.

  Rozszezenia domyslne to .ASM i .OBJ
  ale mozna rzadac wlasnych. Naped i
  sciezka ustawione na miejsce wywo-
  lania programu.

 /a     - powoduje wyswietlanie
          wszystkich wierszy programu
          w czasie kompilacji,
 /b     - powoduje wyswietlanie
          blednych wierszy.

Kilka slow o asemblacji.

FA wykonuje minimum dwa przejscia
przez program zrodlowy. Po pierwszym
przejsciu informuje nas o liczbie
pozostalych jeszcze do zdeklarowania
etykiet. Czasami FA musi wykonac
wiecej niz dwa przejscia np:

 po deklaracjach typu:

 a  equ b
 b  equ c
 c  equ 100

 W pierwszym przejsciu wartosc
 otrzyma etykieta c, drugim b, a w
 trzecim a.

 Nalezy jednak pamietac ze deklaracji
 takich nalezy unikac gdyz niepotrze-
 bnie wydluzaja one czas kompilacji
 (zwiekszajac liczbe przejsc).

Rozpoznawane przez FA pseudorozkazy:

Uwaga :

 label - to etykieta,
 text  - to wyrazenie tekstowe podane
         w cudzyslowach (' lub ")

       Uwaga: aby uzyskac znak ' w
        takichze cudzyslowach nalezy
        uzyc go podwojnie np:

        'Windows ''95'

 dowolne wyrazenia to:

  b - oznacza jeden bajt,
  a - oznacza najwyzej dwa bajty,
  e - oznacza najwyzej trzy bajty,
  f - oznacza najwyzej cztery bajty.

 W wyrazeniach liczby mozna podawac
 w systemach:

  -binarnym poprzedzone znakiem % np:

           %101

  -szesnastkowym poprzedzone $ np:

           $FDAACDE

  -dziesietnym np:

           23454

   Liczby moga miec dlugosc 4 bajtow
   ze znakiem.

  -jako wyrazenie znakowe w atasci
   np:
           'A' lub '''' dla '

  -lub wyrazenie w kodach wewne-
  trznych np:

           "I" lub """" dla "

   Wyrazenie znakowe zawsze maja
   dlugosc 1 bajtu i wartosc pierwsze-
   go znaku np:

           'A' i 'ABC' to to samo A.

 Dodatkowo mozna uzywac miedzy
 wyrazeniami mozna uzywac operatorow:

  & - operacja AND,
  | - operacja ORA,
  ^ - operacja EOR,
  * - operacja mnozenia,
  / - operacja dzielenia,
  + - operacja dodawania,
  - - operacja odejmowania.

 FA prawidlowo rozpoznaje kolejnosc
 operacji wg powyzszych priorytetow
 (tzn: AND zawsze pierwsze, minus
 ostatnie). Dzialania odbywaja sie
 na liczbach 4 bajtowych. Liczba
 operacji nie moze przekroczyc 32
 w jednym wierszu. Ponadto mozna
 zmienic kolejnosc operacji poprzez
 uzycie nawiasow kwadratowych np:

       [[4+5]*[256/21]]&$FF

 Sa jeszcze dwa znaki specjalne:

  * i ! - oznaczaja one aktualny stan
          licznika programu.
   Znak * uzywany jest tylko na
   poczatku wyrazenia (dla zgodnosci
   z QA), natomiast ! moze byc uzyty
   wszedzie np:

       *+4
       !-22
       $2300+!

 I. Zgodne z QA:

 OPT b

  - podanie parametrow asemblacji
  gdzie poszczegolne bity oznaczaja :

       76543210

             xx - zakres listowania
             00 - wylaczone,
             01 - tylko bledy,
                - pozostale
                  caly tekst i bledy.

       xx  - typ blokow,
       11  - bez naglowka,
           - pozostale naglowek DOSa.

 ORG a

  - ustawienie nowego adresu programu
  i wygenerowanie naglowka pliku
  ustawionego przez OPT [domyslnie
  DOS].

 ICL nastepne_zrodlo[.roz]

  - dolaczanie pliku zrodlowego,
  naped,sciezka domyslnie ustawione
  na miejsce wywolania programu (NIE
  NA ZRODLO !).

 END

  - koniec pliku zrodlowego lub dola-
  czanego.

 label EQU a

  - przypisuje etykiecie label
  wartosc wyrazenia a, nazwa etykiety
  moze miec dlugosc do 240 znakow.

 [label] DTA x

  - generuje dane odpowiednich dla x
  typow:

   b(b) - dana typy bajt,
   a(a) - dana typu adres (2 bajty),
   l(a) - mlodszy bajt danej typu a,
   h(a) - starszy bajt danej typu a,

   c'ATASCI' - generuje ciag bajtow
             atascii,
   d'INTERN' - generuje ciag bajtow
             internal (wewnetrznych).

 II. Rozszezone lub nowe:

 [label] DTA x

  - nowe typy dla x:

   v(a) - dana typu 2 bajty (wektor),
          dla blokow reloc oznacza
          ze zawarty w niej adres
          na zostac zaktualizowany,
          dla innych blokow na takie
          samo znaczenie jak a,
   e(e) - dana typu 3 bajty,
   f(f) - dana typu 4 bajty,
   g(f) - dane typu 4 bajty w
          odwroconej kolejnosci.

  Ponadto dane liczbowe mozna podawac
  jako wyrazenia oddzielone prze-
  cinkiem np.:

   dta e(0,15000,$FFAACC) itd.

 LST All|Bad|Not

  - opcja listowania podczas
   kompilacji :

    N[ot]   - bez listowania,
    A[ll]   - wszystkie wiersze,
    B[ad]   - tylko bledne.

 BLK x

  - deklaruje nowy blok programu.
    Laczna liczba blokow ograniczona
    jest do 256. Podtypy:

  BLK N[one] a

   - blok bez naglowkow, licznik
   programu ustawiany na a.

  BLK D[os] a

   - blok DOSa z naglowkiem $FFFF lub
   bez naglowka gdy poprzedni taki
   sam, licznik programu na a.

  BLK S[parta] a

   - blok o stalych adresach ladowa-
   nia z naglowkiem $FFFA, licznik
   programu na a.

  BLK R[eloc] M[ain]|E[xtended]

   - blok relokowalny umieszczany
   w pamieci main lub ext.

  BLK E[mpty] a M[ain]|E[xtended]

   - blok relokowalny rezerwyjacy a
   bajtow w pamieci main lub ext.
   Uwaga: licznik programu jest
   natychmiastowo zwiekszany o a
   bajtow.

  BLK U[pdate] S[ymbols]

   - blok aktualizujacy w poprze-
   dnich blokach SPARTA lub RELOC
   adresy symboli SDX.

  BLK U[pdate] A[dress]

   - blok aktualizacji adresow w
   blokach RELOC.

  BLK U[pdate] N[ew] a text

   - blok deklarujacy nowy symbol
   text w bloku RELOC o adresie a.
   Gdy nazwa symbolu poprzedzona jest
   znakiem @, a adres jest z pamieci
   podstawowej to taki symbol moze
   byc wywolywany z command.com.

 label SMB text

  - deklaracja etykiety jako symbolu
   SDX. Dzieki temu po uzyciu
   BLK UPDATE SYMBOLS asembler
   wygeneruje poprawny blok aktua-
   lizacji symboli. Np:

       pf  smb 'PRINTF'
           jsr pf
           ...

       sprawi ze po jsr SDX wstawi
       adres symbolu.

       Uwaga: deklaracja ta nie jest
       przechodnia, to znaczy ze
       ponizszy przyklad spowoduje
       bledy w czasie kompilacji:

       cm  smb 'COMTAB'
       wp  equ cm-1       (blad !)

           sta wp

       Zamiast tego nalezy uzyc:

       cm  smb 'COMTAB'

           sta cm-1       (ok !)

       Uwaga: wszystkie deklaracje
       symboli nalezy uzyc przed
       deklaracjami etykiet, jak i
       programem wlasciwym !

 Kilka slow o nowych blokach :

  Najwazniejsza nowoscia w SDX dla
  programisty jest mozliwosc prostego
  pisania programow relokowalnych.
  Poniewaz procesor MOS 6502 nie
  posiada adresowania wzglednego,
  (procz krotkich skokow warunkowych)
  programisci z ICD zastosowali spe-
  cjalne mechanizmy ladowania blokow
  programu. Caly proces polega na
  zaladowaniu bloku, a nastepnie
  specjalnego bloku aktualizacji
  adresow. Wszystkie adresy w bloku
  programu sa liczone od zera.
  Wystarczy wiec dodac do nich
  wartosc memlo aby otrzymac adres
  wlasciwy. Ktore adresy zwiekszyc,
  a ktore pozostawic ? Wlasnie po
  to jest specjalny blok aktualizacji
  ktory zawiera wskazniki (specjalnie
  kodowane) do tychze adresow. Tak
  wiec po bloku lub blokach RELOC
  obowiazkowe jest wykonanie UPDATE
  ADRESS dla poprawnego dzialania
  programu. Rowniez po blokach
  SPARTA w ktorych rozkazy (lub
  wektory) odwoluja sie do blokow
  RELOC lub EMPTY obowiazkowe jest
  wykonanie UPDATE ADRESS.

  Nastepna innowacja jest wprowa-
  dzenie symboli. Otoz niektore
  procedury uslugowe SDX zostaly
  zdefiniowane za pomoca nazw !
  Nazwy te maja zawsze 8 liter
  (podobnie jak nazwy plikow).
  Zamiast kozystac z tablic wektorow
  lub skokow (jak w OS) kozystamy
  z symboli definiowanych SMB.
  Po wczytywaniu bloku lub blokow
  programu SDX laduje blok aktua-
  lizacji symboli i w podobny sposob
  jak przy blokach relokowalnych
  zamienia adresy w programie.
  Symbole moga byc uzywane dla
  blokow RELOC i SPARTA.

  Programista moze zdefiniowac wlasne
  symbole zastepujace SDX lub zupe-
  lnie nowe dla wykozystania przez
  inne programy. Robi sie to poprzez
  blok UPDATE NEW. Trzeba jednak
  wiedziec ze nowy symbol musi byc
  zawarty w bloku RELOC.

  Liczba blokow reloc i empty jest
  ograniczona do 7 przez SDX.

  Bloki takie mozna laczyc w lancu-
  chy np:

       blk sparta $600
       ...

       blk reloc main
       ...

       blk empty $100 main
       ...

       blk reloc extended
       ...

       blk empty $200 extended

  Oznacza to ze rozkazy w tych
  blokach moga odwolywac sie do
  wszystkich blokow w lancuchu.

  Lancuch taki nie jest przerywany
  przez aktualizacje adresow, lub
  symboli ale jest niszczony przez
  definicje nowego symbolu, oraz
  inne bloki (np: dos).

  Uwaga:
  Lancuch taki ma sens tylko wtedy
  gdy wszystkie jego bloki laduja
  sie do tej samej pamieci, lub
  gdy program przy odpowiednich odwo-
  laniach przelacza pamiec.

  Uwaga:
  Rozkazy i wektory w blokach RELOC i
  EMPTY nie powinny odwolywac sie
  do blokow SPARTA ! Moze to spowodo-
  wac blad gdy uzytkownik zaladuje
  program komenda LOAD, a uzyje go
  po dluzszym czasie. O ile bloki
  RELOC i EMPTY byly bezpieczne to
  nigdy nie wiadomo co jest w pamieci
  tam gdzie ostatnio byl blok SPARTA!

  Rownie niebezpieczne jest uzywanie
  odwolan do blokow RELOC i EMPTY
  przez bloki SPARTA (powod jak
  wyzej), jednakze podczas instalowa-
  nia nakladek (*.sys) z uzyciem
  INSTALL jest to czasem niezbedne,
  stad jest dopuszczalne. Mozna takze
  inicjowac blok SPARTA (porzez $2E2)
  bedzie on wtedy zawsze uruchomiony,
  a potem juz zbedny.

  Uwaga:
  Pomiedzy blokami SPARTA, a RELOC i
  EMPTY moze dojsc do kolizji adre-
  sow ! FA rozpoznaje odwolania do
  innych blokow porzez adresy, przy-
  jmujac PC dla RELOC i EMPTY od
  $1000, tak wiec gdy mieszamy te
  bloki nalezy miec pewnosc ze SPARTA
  lezy ponizej $1000 (np:$600) lub
  powyzej ostatniego bloku relokowa-
  lnego, zazwyczaj wystarcza $4000.
  Blad taki nie jest przez kompilator
  wykrywany !

 Bledy mogoce wystepic podczas
 kompilacji:

 Undeclared label or symbol

   Nie zdefiniowana etykieta lub
   symbol, lub etykiety zapetlone.

 Label declared twice

   Etykieta lub symbol zdefiniowana
   dwa razy.

 Unexpected eol

   Nieoczekiwany koniec wiersza,
   oznacza ze w wierszu powiniec
   znajdowac sie przynajmniej jeden
   znak lub parametr.

 Too many passes

   Zbyt wiele przejsc, gdy liczba
   przejsc przekroczy 255.

 Too big number

   Zbyt duza liczba, liczba przekro-
   czyla dozwolony 4 bajtowy zakres.

 String error

   Blad wyrazenia tekstowego, nie
   zamkniete cudzyslowy lub wyrazenie
   puste.

 Illegal symbol

   Niedozwolony znak w wierszu.

 Branch to far

   Skok wzgledny przekroczyl zakres
   +-128 bajtow.

 Importer type

   Niedozwolony dla danego rozkazu
   typ adresowania.

 Label missing

   Zaginiona etykieta, pseudorozkazy
   EQU i SMB zawsze musza byc poprze-
   dzone etykieta.

 Expresion expected

   Oczekiwane wyrazenie, w wyraze-
   niach liczbowych miedzy znakami
   operacji matamatycznych musi znaj-
   dowac sie jakies inne wyrazenie.

 Too many blocks

   Zbyt duza liczba blokow, laczna
   liczba blokow nie moze przekroczyc
   256, a liczba blokow RELOC i EMPTY
   7.

 Undefined or long

   Niezdefiniowana lub zbyt dluga
   etykieta, przy definicji blokow
   etykiety musza byc zdefiniowane
   przed ich uzyciem, a wyrazenie
   nie moga byc wieksze niz 2 bajty.

 Importer block type

   Zly typ bloku, blok np: UPDATE
   NEW nie moze wystapic po bloku
   DOS.

 Long or symbol

   Wyrazenie ma za duza wartosc lub
   zawiera symbol.

 Parenthesis not balanced

   Nie zamkniete nawiasy.

 Too many operations

   Zbyt duzo operacji w wyrazenu,
   liczba operacji ograniczona jest
   do 32.

 Unexpected symbol

   Nieoczekiwany symbol, symboli nie
   mozna uzywac w blokach innych niz
   SPARTA lub RELOC oraz w defini-
   cjach blokow.

 end of FA doc.
