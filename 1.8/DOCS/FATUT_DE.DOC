Fast Assembler 1.8 - Tutorial
=============================
Holger Janz, 11-11-2021


Einleitung
----------

Dieses Tutorial soll helfen, sich
schnell in den Umgang mit Fast
Assembler einzuarbeiten. Grundlagen
in 6502 Assembler werden vorausgesetzt.
Fuer technische Information zu Fast
Assembler (z.B. fuer alle Pseudo
Operationen) kann die Dokumentation
FA.DOC oder die Man Pages FA.MAN
genutzt werden.

Fast Assembler ist ein Datei zu Datei
Assembler fuer SpartaDOS X, d.h. der
Assembler-Quelltext muss in einer Datei
im ATASCII Format vorliegen und der
Assembler erzeugt eine Objektdatei.

Ein grosser Vorteil von Fast Assembler
ist, dass er sowohl SpartaDOS X als
auch Atari DOS Objektdateien erzeugen
kann.

In diesem Tutorial werden kurz die
Grundlagen des Aufbaus des Quelltexts
erlaeutert. Im Anschluss wird mit Hilfe
eines kleinen Demos, die Erzeugung von
Atari DOS Programmen behandelt. Im
letzten Abschnitt werden mehrer
Beispiele fuer SpartaDOS X Programme
gezeigt.

Fuer das Tutorial werden folgende
Assembler-Dateien benoetigt:

Atari DOS Beispiel
- Farbdemonstration
  RAINBOW.ASM

SpartaDOS X Beispiele
- Hello Atari
  HELLO.ASM
- Speicherresidentes Programm
  TSR.ASM
  TSR_CALL.ASM
- Kommunikation zwischen Programmen
  CALLER.ASM
  CALLEE.ASM
- Program zum Vergleich von Dateien
  MY_COMP.ASM

Fuer das Tutorial wird ein Editor fuer
ATASCII Dateien benoetigt. Ich kann
dafuer XEDIT von FJC empfehlen. Dieser
bietet die Moeglichkeit zwei Dateien
gleichzeitig zu oeffnen, besitzt eine
sehr gute Cut-and-Paste Funktionalitaet
und kann Leerzeichen sichtbar machen.
Der Editor wird mit XEDIT [name.ext]
aufgerufen, mit der <HELP>-Taste
gelangt man in ein Hilfe-Menue.
Der SpartaDOS X Editor ED is auch
geeignet.

Freundlicherweise hat JFC (Jonathan
Halliday) seine Zustimmung gegeben,
dass ich seinen Editor zusammen mit
Fast Assembler weitergeben darf.
Nochmal vielen Dank dafuer an FJC!

Aufbau des FA Quelltexts
------------------------

Der Quelltext ist zeilenorientiert,
d.h. jede Zeile kann einen Befehl
enthalten. Es darf auch Leerzeilen
geben, diese duerfen keine weiteren
Leerzeichen enthalten. Wenn z.B. die
Zeile 42 ein Leerzeichen enthaelt,
wird folgende Fehlermeldung erzeugt:
42:
ERROR: Unexpected eol

In XEDIT kann man mit dem Kommando
<CONROL><H> Leerzeichen aufspueren.
<CONTROL><H> macht das RETURN-Zeichen
am Zeilenende sichtbar, wodurch
Leerzeichen erkannt und geloescht
werden koennen.

Kommentarzeilen beginnen mit *. Alles
nach * bis zum Zeilenende wird vom
Assembler ignoriert.

Beispiel:
* This is a comment!

Kommentare koennen auch nach einem
Befehl folgen. Dort muessen sie nicht
mit * eingeleitet werden. Der
Assembler ignoriert alle Zeichen nach
einem Befehl bis zum Zeilenende.

Eine Befehlszeile ist wie folgt
aufgebaut:

[label] opcode [operand] [comment]

Beispiel mit Label und Kommentar:
start   ldx #$08 set X register

Beispiel ohne Label und Kommentar:
ldy #$10

Ein Besonderheit gegenueber
anderen Assembler sind die
Operationen, die sowohl mit dem
Akkumulator als auch mit Adressierung
benutzt werden koennen. Hier muss
fuer den Akkumulator das Zeichen @
benutzt werden.

Beispiel ASL auf Adresse $3000:
        asl $3000

Beispiel ASL auf Akkumulator:
        asl @


RAINBOW.ASM - Farbdemonstartion
--------------------------------

Dieses Beispiel zeigt, wie Atari-DOS-
kompatible Programme erstellt werden
koennen. Es ist ein kleines Demo mit
klassischen Atari Farb-Scrolling.

Assemblieren mit:
FA RAINBOW.ASM RAINBOE.COM

Ausfuehren mit:
RAINBOW

Mit START wird das Programm beendet.

Das Programm kann angezeigt und
bearbeitet werden mit:
XEDIT RAINBOW.ASM
oder:
ED  RAINBOW.ASM

Das Programm besteht aus zwei
Bloecken. Ein Block enthaelt das
eigentliche Programm, der Zweite die
Startadresse. Ein klassisches Atari
DOS Programm. Bloecke werden mit dem
Pseudobefehl BLK eingeleitet. Der
zweite Parameter enthaelt den Typ. DOS
steht fuer Atari DOS Block. Als
dritter Parameter folgt die
Anfangsadresse des Blocks. Die
Anweisung BLK DOS entspricht der
Anweisung ORG oder *= in anderen
Assemblern.

Um das Fehlerverhalten kennen zu
lerner, sollte jetzt die Anweisung:
      bne loop
wie folgt geaendert werden:
      bne loopX

Beim Assemblieren mit:
FA RAINBOW.ASM RAINBOW.COM

erscheint folgende Fehlermeldung:
ERROR: Undeclared label or symbol

Wenn der Quelltext wieder korrigiert
ist, sollte in der leeren Zeile 4
ein Leerzeichen eingefuegt werden.
Mit <CONTROL><H> kann
man RETURN-Zeichen in XEDIT sichtbar
machen. Nun kann man sehen, dass sich
ein Leerzeichen in der Zeile befindet.
Folgende Fehlermeldung erscheint:
ERROR: Unexpected eol

Nach der Korrektur sollte man noch ein
wenig probieren und das Fehlverhalten
studieren.


HELLO.ASM - Hello Atari
-----------------------

Dies ist ein Beispiel fuer ein
SpartaDOS X Programm. Es kann nicht
unter Atari DOS ausgefuehrt werden.
In diesem Beispiel wird Relocatable
Code und Symbolic Links verwendet.

Assemblieren mit:
FA HELLO.ASM HELLO.COM

Ausfuehren mit:
HELLO

Nach der Eingabe eines Namens z.B.
Holger, gruesst es:
Hello Holger !

Es werden die SpartaDOS Symbols PRINTF
und GETS benutzt. Diese Symbole werden
erst zur Laufzeit des Programs
eingebunden. Sie werden mit JSR
gerufen und erwarten ihre Parameter
direkt im Anschluss.

Wenn man einen Fehler
macht, kommt es zu einem
Laufzeitfehler.
Als Beispiel sollte die Zeile:
PRINTF  smb 'PRINTF'
wie folgt geaendert werden:
PRINTF  smb 'PRINTFX'

Das Programm laesst sich assemblieren.
Beim Start wird dann aber folgende
Fehlermeldung ausgegeben:
Symbol PRINTFX
154 Symbol not defined 

Weitere Informationen ueber die Symbole
koennen im SpartaDOS X Programming
Guide gefunden werden.

Das Programm besteht aus zwei Bloecken.
Einem Relocatable Code Block und einem
Relocatable Allocate Block. Beiden ist
gemein, dass die Ladeadresse zur
Assemblierungszeit nicht bekannt ist.
Solche Bloecke werden von SpartaDOS
immer automatisch ab MEMLO
geladen und MEMLO wird danach weiter
gesetzt. Weiterhin werden dann die
Adressen im Programm angepasst. Fuer
den Allocate Block wird von SpartaDOS
nur MEMLO weitergesetzt, d.h. der
Speicher wird nicht initialisiert.
Wird das Programm beenden, so wird
MEMLO von SpartaDOS wieder zurueck
gesetzt.


TSR/TSR_CALL.ASM - Beispiel
Speicherresidentes Programm
---------------------------

In SpartaDOS X kann man sehr einfach
speicherresidente Programme schreiben.
Dies sind Programme, die nicht aus
dem Speicher entfernt werden, wenn
sie beendet sind.

Dies kann man mit dem Symbol INSTALL
erreichen. Es ist bei Start eines
Programmes mit 0 initialisiert. Wenn
beim beenden des Programs INTALL den
Wert $FF hat, wird es nicht aus dem
Speicher entfernt, d.h. MEMLO wird
nicht zurueckgesetzt. So kann man sehr
einfach zusaetzliche Treiber schreiben.

Man kann seinen Unterprogrammen auch
einen Namen geben und so neue
SpartaDOS X Symbole definieren. Dies
geschieht mit folgendem Blockbefehl:
blk update new <address> '<name>'

Wenn der Name mit @ anfaengt, so wird
es in COMMAND auch als Kommando
erkannt.

Diese Beispiel besteht aus zwei
Programmen:
1) TSR.ASM definiert ein
neues Symbol @GREET, welches auch
als Kommando bekannt gemacht wird
(der Name beginnt mit @)
2) TSR_CALL.ASM benutzt dieses Symbol.
Aus diesem Grund funktioniert es nur,
wenn TSR vorher gestartet wurde
und damit auch das Symbol @GREET
bekannt ist. Wenn nicht kommt es
zu folgenden Fehler:
Symbol @GREET
154 Symbol not defined 

Wenn TSR ausgefuehrt wurde, kann man
GREET direkt aus SpartaDOS X aufrufen,
oder man ruft das Programm TSR_CALL,
welches das Symbol aufruft.

CALLER/CALLEE.ASM - Beispiel
Kommunikation zwischen Programmen
---------------------------------

In SparatDOS X kan man aus einem
Programm (CALLER) direkt ein anderes
Programm (CALLEE). Dazu wird die
Funktion U_LOAD. Mit dem Symbol
FLAG kann man dem gerufenen Program
einen Wert uebergeben. Es gibt noch
weitere Moeglichkeiten, Daten an das
gerufenen Programm zu uebergeben. Um
das Beispiel einfach zu halten,
werden diese hier nicht benutzt.
Das gerufenen Program kann mit dem
Symbol STATUS einen Rueckgabewert
setzen. 

Das Programm CALLER ruft ein anderes
Program und setzt vorher FLAG. Der
Wert fuer FLAG und der Programmname
werde ueber die Kommandozeile
uebergeben, z.B.:
CALLER 2 CALLEE.COM

Das Program CALLEE liest FLAG,
multipliziert den Wert mit 8 und
setzt mit dem Ergebnis STATUS.
Hierzu wird die Funktion MUL_32
benutzt. Diese Funktion erwartet
die Parameter an bestimmten Adressen
relativ zu COMTAB und schreibt so
auch das Ergebnis.

Beide Programme geben die Werte von
FLAG und STATUS aus die sie gesetzt
oder uebergeben bekommen haben.


EX5COMP.ASM - Beispiel
Program zum Vergleich von Dateien
---------------------------------

In diesem Beispiel wird gezeigt, wie
ein neuer externer Befehl fuer
SpartaDOS X entwickelt werden kann.
Er ist aehnlich dem Befehl COMP und
vergleicht zwei Dateien. Ein
Unterschied ist, dass das Ergebnis
nicht nur mit PRINTF ausgegeben wird,
sondern auch STATUS gesetzt wird.
Wenn die Dateien nicht gleich sind,
wird der STATUS auf $FF(255) gesetzt.
Da dies ein Wert ueber $80(128) ist,
wird er von SparataDOS X als Fehler
interpretiert. Da die Fehlernummer
$FF(255) keinen Fehlertext besitzt,
erfolgt folgende Ausgaben:
255 System ERROR

Das Setzen einer Fehlernummer hat den
Vorteil, dass man in einer Batch-Datei
mit dem Befehl IF ERROR 255 darauf
reagieren kann. Dies kann man z.B.
fuer automatische Tests nutz, wenn eine
zu testendes Programm eine Datei erzeugt
und das erwartete Ergebnis in einer
anderen Datei schon vorliegt.

