
Fast Assembler v.1.8 PD 2021
----------------------------

Fast Assembler, as the name
suggests, is an assembler, though
not as fast as it implies (Hmm).

It is a multi purpose assembler, but
is specially designed for SDX
systems and only works with SDX.

It is completely compatible with
Quick Assembler v.1.0, and has many
advantages in addition. It is
not compatible with MAC/65.

Program calling syntax :

Note:
 [op]    - an option that can be
           omitted,
 op1|op2 - one option must be
           selected.

FA src[.ext] [obj[.ext]] [/lse]

 src - ATASCII source file,
 obj - target file.

  The default extensions (ext)
  are .ASM and .OBJ, but you can use
  your own. Drive and path set to
  where FA was called.

 /l     - all source lines to be
          displayed at compile time,
 /s     - print summary, e.g. count
          of labels and blocks,
 /e     - sets FA errors to system
          errors starting from 224
          ($E0) if compile failed,
          can be used in batch with
          IF ERROR.

A few words about assembly.

The FA executes a minimum of two
passes through the source. After the
first pass, it informs about the
number of labels still to be
resolved. Sometimes FA has to execute
more than two passes, e.g. after the
following type declarations:

 a  equ b
 b  equ c
 c  equ 100

 In the first pass, the value of c
 will be resolved, in the second
 pass b, and in the third pass a.

 However, such declarations should
 be avoided because they
 unnecessarily extend the
 compilation time (by increasing the
 number of passes).

Pseudo instructions of  FA:

Note :

 label - it's a label,
 text  - is a text expression given
         in quotation marks ('or ")

       Note: to get the character of
       the quotation marks inside a
       quotation you have to use it
       twice e.g.:

        'Windows ''95'

 expressions:

  b - one byte,
  a - maximum of two bytes,
  e - maximum of three bytes,
  f - maximum of four bytes.

 In expressions, numbers can be
 given in following number systems:

  -binary preceded by % e.g.:
           %101

  -hexadecimal preceded by $ e.g.:
           $FDAACDE

  -decimal e.g.
           23454

   Numbers can be 4 bytes signed.

  -character expression in ATASCII,
    e.g.
           'A' or '''' for '

  -or expression in internal codes,
   e.g.:
           "I" or """" for "

   Character expressions always have
   a length of 1 byte and the value
   of the first character, e.g.:

           'A' and 'ABC' results
           both to A.

 Additionally, you can use the
 following operators within
 expressions:

  & - operator AND,
  | - operator ORA,
  ^ - operator EOR,
  * - multiplication,
  / - dividing,
  + - addition,
  - - subtraction.

 FA correctly recognizes the
 sequence of operations according to
 the above priorities (ie: AND
 always first, minus last). The
 operations are performed on 4 byte
 numbers. The number of operations
 is limited to 32 in one expression.
 In addition, you can change the
 order of operations by using square
 brackets, e.g .:

       [[4+5]*[256/21]]&$FF

 There are two more special
 characters:

  * and ! - they indicate the
            current program counter.
   The * character can only be used
   at the beginning of an expression
   (for QA compatibility), while the
   ! character can be used
   anywhere in an expression, e.g.:

       *+4
       !-22
       $2300+!

I. Compatibility with QA:

 OPT b

  - assembly option, the individual
    bits have the following meaning:

       76543210

             xx - source listing
             00 - off,
             01 - only errors,
                - others complete
                  source and errors.

       xx  - block type,
       11  - no header,
           - others DOS header.

 ORG a

  - sets new program address and
    generating the file header set
    by OPT [DOS by default].

 ICL next_src[.ext]

  - includes source file, drive,
    path by default set to where FA
    was called (NOT TO CURRENT
    SOURCE!).

 END

  - end of source or include file.

 label EQU a

  - assigns the value of the
    expression 'a' to label 'label',
    the label name can be up to 240
    characters.

 [label] DTA x

  - generates data of following
    types x:

   b(b) - type byte,
   a(a) - address type (2 bytes),
   l(a) - low byte of 'a',
   h(a) - high byte of 'a',

   c'ATASCI' - ATASCII sequence,
   d'INTERN' - string of internal
               bytes.

II. Additional or New Features:

 [label] DTA x

  - new types for 'x':

   v(a) - 2 bytes (vector), for
          reloc blocks the address
          is updated, for other
          blocks it is like a(a),
   e(e) - type 3 bytes,
   f(f) - type 4 bytes,
   g(f) - type 4 bytes in reverse
          order.

  In addition, numerical data can be
  given as expressions separated by
  a comma, e.g.:

   dta e(0,15000,$FFAACC) etc.

 LST All|Bad|Not

  - compile-time listing option:

    N[ot]   - no listing,
    A[ll]   - complete listing,
    B[ad]   - list error line
              (always on with 1.8).

 BLK x

  - declares a new program block.
    The total number of blocks is
    limited to 256. Kinds of blocks:

  BLK N[one] a

   - block without headers, program
     counter is set to a.

  BLK D[os] a

   - DOS block with the $FFFF header
     or without if the previous
     block was of the same kind,
     program counter is set to a.

  BLK S[parta] a

   - Sparta block with fix loading
     address with header $FFFA,
     program counter is set to a.

  BLK R[eloc] M[ain]|E[xtended]

   - relocatable block placed in
     main or extended memory.

  BLK E[mpty] a M[ain]|E[xtended]

   - relocatable block to allocate
     bytes in main or extended
     memory.
     Note: the program counter is
     incremented immediately.

  BLK U[pdate] S[ymbols]

   - block that updates SDX address
     of symbols in previous SPARTA
     or RELOC blocks.

  BLK U[pdate] A[dress]

   - block for updating addresses in
     RELOC blocks.

  BLK U[pdate] N[ew] a text

   - block declaring a new text
     symbol in a RELOC block with
     the address a. When the symbol
     name starts with the @ and
     the address is of type main
     memory, such a symbol can be
     called from command.com.

 label SMB text

  - declaration of a label as SDX
    symbol. Thus, after using BLK
    UPDATE SYMBOLS the assembler
    will generate the correct symbol
    update block. For example:

       pf  smb 'PRINTF'
           jsr pf
           ...

       inserts SDX symbol address
       for pf.

       Note: This declaration is not
       transitive, i.e. the
       following example will cause
       compile time errors:

       cm  smb 'COMTAB'
       wp  equ cm-1    (Error !)

           sta wp

       Use instead:

       cm  smb 'COMTAB'

           sta cm-1    (ok !)

       Note: All symbol declarations
       should be defined before
       label declarations and the
       program blocks!

 A few words about new block kinds :

  The most important innovation in
  SDX for a developer is the ability
  to easily write relocatable
  programs. Since the MOS 6502
  processor does not have relative
  addressing modes, (except for
  short conditional jumps) the ICD
  programmers have used a special
  program block loading mechanisms.
  The process is loading a block and
  then use a special block for
  updating addresses. All addresses
  in the program block are zero
  based. So just add the memlo value
  to them to get the correct
  addresses. Which addresses to
  increase and which to leave? This
  is what a special update block is
  for that contains pointers
  (specially coded) to these
  addresses. So, after the RELOC
  block or blocks, it is mandatory
  to execute the UPDATE ADDRESS for
  the correct operation of the
  program. Also after SPARTA blocks
  where commands (or vectors) refer
  to RELOC or EMPTY blocks, UPDATE
  ADDRESS is mandatory.

  The next innovation is the
  introduction of symbols. Well,
  some SDX service routines are
  defined by names! These names are
  always 8 letters long (like
  filenames). Instead of using
  vectors or jump arrays (like the
  OS) SDX uses symbols defined by
  SMB. After reading a block or
  program blocks, SDX loads the
  symbol update block and in a
  similar way to relocatable blocks
  it swaps addresses. Symbols can be
  used in RELOC and SPARTA blocks.

  Programmer can define their own
  symbols to replace SDX symbols or
  define completely new ones for use
  by other programs. This is done
  via the UPDATE NEW block. However,
  the new symbol must be implemented
  in a RELOC block.

  The number of reloc and empty
  blocks is limited to 7 by SDX.

  Blocks can be combined in
  chains, e.g.:

       blk sparta $600
       ...

       blk reloc main
       ...

       blk empty $100 main
       ...

       blk reloc extended
       ...

       blk empty $200 extended

  This means that commands in these
  blocks can refer to all blocks in
  the chain.

  This chain is not broken by
  address or symbol updates but is
  destroyed by new symbol
  definitions and other kind
  blocks (eg: DOS).

  Note: Such a chain only makes
  sense if all its blocks are loaded
  into the same memory, or if the
  program switches memory with
  appropriate invocations.

  Note: The commands and vectors in
  RELOC and EMPTY blocks should not
  refer to SPARTA blocks! This can
  cause an error when the user loads
  the program with the LOAD command
  and uses it after a long time.
  While RELOC and EMPTY blocks were
  safe, you never know what's in
  memory where the last SPARTA block
  was loaded!

  It is also dangerous to use RELOC
  and EMPTY block references by
  SPARTA blocks (reason as above),
  however when installing resident
  programs (* .sys) using INSTALL it
  is sometimes necessary, hence it
  is allowed. You can also
  initialize a SPARTA block (via
  $2E2), which will then always be
  activated and then no longer
  needed.

  Note: Address collisions can occur
  between SPARTA, RELOC and EMPTY
  blocks! FA recognizes references
  to other blocks by address,
  assuming PC for RELOC and EMPTY
  from $1000, so when mixing these
  blocks you should be sure that
  SPARTA is below $1000 (e.g. $600)
  or above the last relocatable
  block, usually $4000 and above.
  This error is not detected by the
  compiler!

Errors that may occur during
compilation:

 Undeclared label 224($E0)
   Undefined label or symbol or
   recursive labels.

 Label declared twice 225($E1)
   Label or symbol defined twice.

 Unexpected eol 226($E2)
   Unexpected line break means there
   should be at least one character
   or parameter in the line.

 Too many passes 227($E3)
   Too many passes when the number
   of passes exceeds 8.

 Too big number 228($E4)
   Number too large, the number
   exceeded the allowed 4 byte
   range.

 String error 229($E5)
   Text expression error, no closing
   quotation mark or empty phrase.

 Illegal symbol 230($E6)
   Illegal character in line.

 Branch to far 231($E7
   The relative jump is beyond the
   range of +127 and -128 bytes.

 Improper type 232($E8)
   Addressing type not allowed for
   the given command.

 Label missing 233($E9)
   Missing label, EQU and SMB pseudo
   commands must always be preceded
   by a label.

 Expression expected 234($EA)
   Expected expression, after a
   numerical an expression must
   follow.

 Too many blocks 235($EB)
   Too many blocks, the total number
   of blocks cannot exceed 256 and
   the number of RELOC and EMPTY
   blocks cannot exceed 7.

 Undefined or too long 236($EC) 
   Undefined or too long label, when
   defining labels a label block
   must be defined before using
   them, and the result of the
   address expression must not be
   larger than 2 bytes.

 Improper block type 237($ED)
   Wrong type of block, e.g. UPDATE
   NEW block cannot follow DOS
   block.

 Too long or invalid symbol 238($EE)
   The expression is too large or
   contains a symbol.

 Parenthesis not balanced 239($EF)
   Missing parentheses.

 Too many operations 240($F0)
   Too many operations in
   expression, the number of
   operations is limited to 32.

 Unexpected symbol 241($E1)
   Unexpected symbol, symbols cannot
   be used in blocks other than
   SPARTA or RELOC and in block
   definitions.

 Internal error 242($E2)
   Internal error, please drop me an
   email with instruction to
   reproduce (holgerjanz@msn.com)

End of FA documentation.

