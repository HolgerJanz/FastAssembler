
Fast Assembler 1.8
==================

Purpose
-------

Assembler for SpartaDOS X

Syntax
------

FA src[.ext] obj[.ext] [/a] [/b]

src - ATASCII source file
obj - target object file

The default extensions (ext) are .ASM and .OBJ.

/a - all source lines to be displayed at compile time

/b - only erroneous lines to be displayed.

Remarks
-------

label - it's a label,

text  - is a text expression given in quotation marks ('or ")

Note: to get the character of the quotation marks inside a quotation you have to use it twice e.g.:

        'Windows ''95'

expressions:

b - one byte,
a - maximum of two bytes,
e - maximum of three bytes,
f - maximum of four bytes.

In expressions, numbers can be given in following number systems:
- binary preceded by % e.g. %101
- hexadecimal preceded by $ e.g. $FDAACDE
- decimal e.g. 23454
Numbers can be 4 bytes signed.
- characters in ATASCII, e.g. 'A' or '''' for '
- characters in display code, e.g. "I" or """" for "

Character expressions always have a length of 1 byte and the value of the first character, e.g.:
'A' and 'ABC' both results A.

Additionally, you can use the following operators within expressions:
  & - operator AND,
  | - operator ORA,
  ^ - operator EOR,
  * - multiplication,
  / - dividing,
  + - addition,
  - - subtraction.

FA correctly recognizes the sequence of operations according to the above priorities (e.g. AND always first, minus last). The operations are performed on 4 byte numbers. The maximum number of operators is limited to 32 per expression. You can change the order by using square brackets, e.g .:
  [[4+5]*[256/21]]&$FF

There are two more special characters: * and !. They indicate the current program counter. The * character can only be used at the beginning of an expression (for QA compatibility), while the ! character can be used anywhere in an expression, e.g.:
  *+4
  !-22
  $2300+!

Pseudo Instructions
-------------------

I. Compatibility with QA:

OPT b
assembly option, the individual bits have the following meaning:
  76543210
        xx - source listing
        00 - off
        01 - only errors
           - others complete source and errors
  xx - block type
  11 - no header
     - others DOS header.

ORG a
sets new program address and generating the file header set by OPT [DOS by default].

ICL next_src[.ext]
includes source file, drive, path by default set to where FA was called (NOT TO CURRENT SOURCE!).

END
end of source or include file.

label EQU a
assigns the value of the expression 'a' to label 'label', the label name can be up to 240 characters.

[label] DTA x
generates data suitable for 'x' types:
  b(b) - type byte,
  a(a) - address type (2 bytes),
  l(a) - low byte of 'a',
  h(a) - high byte of 'a',
  c'ATASCI' - ATASCII sequence,
  d'INTERN' - sequence of display code.

II. Additional or New Features:

[label] DTA x
new types for 'x':
  v(a) - 2 bytes (vector), for reloc blocks the address is updated, for other blocks it is like a(a),
  e(e) - type 3 bytes,
  f(f) - type 4 bytes,
  g(f) - type 4 bytes in reverse order.
In addition, numerical data can be given as expressions separated by a comma, e.g.:
   dta e(0,15000,$FFAACC) etc.

LST All|Bad|Not
compile-time listing option:
  N[ot] - no listing,
  A[ll] - complete listing,
  B[ad] - only errors.

BLK x
declares a new program block. The total number of blocks is limited to 256. Kinds of blocks:

  BLK N[one] a - block without headers, program counter is set to a.

  BLK D[os] a  - DOS block with the $FFFF header or without if the previous block  was of the same kind, program counter is set to a.

  BLK S[parta] a - Sparta block with fix loading address with header $FFFA, program counter is set to a.

  BLK R[eloc] M[ain]|E[xtended] - relocatable block placed in main or extended memory.

  BLK E[mpty] a M[ain]|E[xtended] - relocatable block to allocate bytes in main or extended memory. Note: the program counter is incremented immediately.

  BLK U[pdate] S[ymbols] - block that updates SDX address of symbols in previous SPARTA or RELOC blocks.

  BLK U[pdate] A[dress]  - block for updating addresses in RELOC blocks.

  BLK U[pdate] N[ew] a text - block declaring a new text symbol in a RELOC block with the address a. When the symbol name starts with the @ character and the address is of type main memory, such a symbol can be called from command.com.

label SMB text
declaration of a label as SDX symbol. Thus, after using BLK UPDATE SYMBOLS the assembler will generate the correct symbol update block. For example:

  pf  smb 'PRINTF'
      jsr pf
      ...
  inserts SDX symbol address for pf.

This declaration is not transitive, i.e. the following example will cause a compile time error:
  cm  smb 'COMTAB'
  wp  equ cm-1    (Error !)
      sta wp

Use instead:
  cm  smb 'COMTAB'
      sta cm-1    (ok !)

Note: All symbol declarations should be defined before label declarations and the program blocks!

Error Messages
---------------

Undeclared label or symbol - Undefined label or symbol or recursive labels.

Label declared twice - Label or symbol defined twice.

Unexpected eol - Unexpected line break means there should be at least one character or parameter in the line.

Too many passes - Too many passes when the number of passes exceeds 255.

Too big number - Number too large, the number exceeded the allowed 4 byte range.

String error - Text expression error, no closing quotation mark or empty phrase.

Illegal symbol - Illegal character in line.

Branch to far - The relative jump is beyond the range of +127 and -128 bytes.

Improper type - Addressing type not allowed for the given command.

Label missing - Missing label, EQU and SMB pseudo commands must always be preceded by a label.

Expression expected - Expected expression, after a numerical an expression must follow.

Too many blocks - Too many blocks, the total number of blocks cannot exceed 256 and the number of RELOC and EMPTY blocks cannot exceed 7.

Undefined or long - Undefined or too long label, when defining labels a label block must be defined before using them, and the result of the address expression must not be larger than 2 bytes.

Improper block type - Wrong type of block, e.g. UPDATE NEW block cannot follow DOS block.

Long or symbol - The expression is too large or contains a symbol.

Parenthesis not balanced - Missing parentheses.

Too many operations - Too many operations in expression, the number of operations is limited to 32.

Unexpected symbol - Unexpected symbol, symbols cannot be used in blocks other than SPARTA or RELOC and in block definitions.

Note
----

For more information about programming with SpartaDOS X please refer to the "SpartaDOS X Programming Guide".

